let levelling = require('../lib/levelling') 
 let fs = require('fs') 
 let path = require('path') 
 let fetch = require('node-fetch') 
 let moment = require('moment-timezone') 
 let jimp = require('jimp') 
 let PhoneNumber = require('awesome-phonenumber') 
 let tags = {} 
 const defaultMenu = { 
   before: `乂 *USER*
× Name %name! 
× Waktu:  *%time* 
× Name Bot: *%me*
× Uptime:  *%uptime (%muptime)* 
× Memory Used :  *${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${Math.round(require('os').totalmem / 1024 / 1024)}MB* 
%readmore`.trim(),
  header: `ꗃ %category .᭡`, 
   body: '◦  %cmd %islimit %isPremium', 
   footer: '\n', 
   after: ``,
}
  
 let handler = async (m, { conn, usedPrefix: _p }) => { 
   try { 
     let name = m.pushName || conn.getName(m.sender) 
     let d = new Date(new Date + 3600000) 
     let locale = 'en' 
     // d.getTimeZoneOffset() 
     // Offset -420 is 18.00 
     // Offset    0 is  0.00 
     // Offset  420 is  7.00 
     let date = d.toLocaleDateString(locale, { 
       day: 'numeric', 
       month: 'long', 
       year: 'numeric', 
       timeZone: 'Asia/Jakarta' 
     }) 
     let time = d.toLocaleTimeString(locale, { timeZone: 'Asia/Jakarta' }) 
     time = time.replace(/[.]/g, ':') 
     let _uptime 
     if (process.send) { 
       process.send('uptime') 
       _uptime = await new Promise(resolve => { 
         process.once('message', resolve) 
         setTimeout(resolve, 1000) 
       }) * 1000 
     } 
     let txt = await res.text() 
     let arr = txt.split('\n') 
     let cita = arr[Math.floor(Math.random() * arr.length)] 
       let vn = './media/tante-tante.mp3' 
     let uptime = clockString(_uptime) 
     let help = Object.values(global.plugins).filter(plugin => !plugin.disabled).map(plugin => { 
       return { 
         help: Array.isArray(plugin.tags) ? plugin.help : [plugin.help], 
         tags: Array.isArray(plugin.tags) ? plugin.tags : [plugin.tags], 
         prefix: 'customPrefix' in plugin, 
         limit: plugin.limit, 
         premium: plugin.premium, 
         enabled: !plugin.disabled, 
       } 
     }) 
     for (let plugin of help) 
       if (plugin && 'tags' in plugin) 
         for (let tag of plugin.tags) 
           if (!(tag in tags) && tag) tags[tag] = tag 
     conn.menu = conn.menu ? conn.menu : {} 
     let before = conn.menu.before || defaultMenu.before 
     let header = conn.menu.header || defaultMenu.header 
     let body = conn.menu.body || defaultMenu.body 
     let footer = conn.menu.footer || defaultMenu.footer 
     let after = conn.menu.after || defaultMenu.after 
     let _text = [ 
       before, 
       ...Object.keys(tags).map(tag => { 
         return header.replace(/%category/g, tags[tag].toUpperCase()) + '\n' + [ 
           ...help.filter(menu => menu.tags && menu.tags.includes(tag) && menu.help).map(menu => { 
             return menu.help.map(help => { 
               return body.replace(/%cmd/g, menu.prefix ? help : '%p' + help) 
                 .replace(/%islimit/g, menu.limit ? 'Ⓛ' : '') 
                 .replace(/%isPremium/g, menu.premium ? 'Ⓟ' : '') 
                 .trim() 
             }).join('\n') 
           }), 
           footer 
         ].join('\n') 
       }), 
       after 
     ].join('\n') 
     let text = typeof conn.menu == 'string' ? conn.menu : typeof conn.menu == 'object' ? _text : '' 
     let replace = { 
       '%': '%', 
       p: _p, uptime, 
       me: conn.getName(conn.user.jid), 
       name, date, time, 
       readmore: readMore 
     } 
     let fkon = { key: { fromMe: false, participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "6282331033919-1625305606@g.us" } : {}) }, message: { contactMessage: { displayName: `${name}`, vcard: `BEGIN:VCARD\nVERSION:3.0\nN:;a,;;;\nFN:${name}\nitem1.TEL;waid=${m.sender.split('@')[0]}:${m.sender.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`}}}
let tqto = `*BIG THANKS TO*
• God
• My ortu
• Zivfurr / Ziv San ( Me )
• Nurutomo
• Ariffb
• Penyedia Layanan API
• Orang-orang yang Berdonasi` 
     text = text.replace(new RegExp(`%(${Object.keys(replace).sort((a, b) => b.length - a.length).join`|`})`, 'g'), (_, name) => '' + replace[name])
conn.send2ButtonDoc(m.chat, text.trim(), tqto,  'DASHBORD', '.dashbord', 'RULES', '.rules', m, { 
     quoted: fkon, 
     contextInfo: { 
         externalAdReply :{ showAdAttribution: true, 
    mediaType: 1, 
    title: 'Simple Bot Whatsapp By Ziv San',
    thumbnail: await(await fetch('https://telegra.ph/file/990db35090f4544624f85.jpg')).buffer(),
    renderLargerThumbnail: true, 
    sourceUrl: `https://www.tiktok.com/@colindonesia?_t=8VRaB1ZSiI6&_r=1`
     }}
    })
} catch (e) { 
     conn.reply(m.chat, 'Maaf, menu sedang error', m) 
     throw e 
   } 
 } 
 handler.help = ['menu', 'help', '?'] 
 handler.tags = ['main'] 
 handler.command = /^(m(enu)?|help|\?)$/i 
 handler.owner = false 
 handler.mods = false 
 handler.premium = false 
 handler.group = false 
 handler.private = false 
  
 handler.admin = false 
 handler.botAdmin = false 
  
 handler.fail = null 
 handler.exp = 3 
  
 module.exports = handler 
  
 const more = String.fromCharCode(8206) 
 const readMore = more.repeat(4001) 
  
 function clockString(ms) { 
   let h = isNaN(ms) ? '--' : Math.floor(ms / 3600000) 
   let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60 
   let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60 
   return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':') 
 } 
 function ucapan() { 
   const time = moment.tz('Asia/Jakarta').format('HH') 
   res = "Selamat dinihari" 
   if (time >= 4) { 
      res = "Selamat pagi 🌄" 
   } 
   if (time > 10) { 
     res = "Selamat siang ☀️" 
   } 
   if (time >= 15) { 
     res = "Selamat sore 🌇" 
   } 
   if (time >= 18) { 
     res = "Selamat malam 🌙" 
   } 
   return res 
 }
